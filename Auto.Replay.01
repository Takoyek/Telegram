import logging
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from telethon import TelegramClient, events

# تنظیمات logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# اطلاعات API
api_id = 29646851
api_hash = '70a40f9db30071a7be02eb35fef561b6'
phone_number = '+989155841124'

# ایجاد کلاینت
client = TelegramClient('my_session', api_id, api_hash)

# ایجاد دیتابیس و تنظیمات SQLAlchemy
engine = create_engine('sqlite:///my_session.db', connect_args={'check_same_thread': False})
Session = sessionmaker(bind=engine)
session = Session()
Base = declarative_base()

# تعریف مدل برای کاربران
class UserState(Base):
    __tablename__ = 'user_state'
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, unique=True, nullable=False)
    state = Column(String, nullable=False)

Base.metadata.create_all(engine)

# نگهداری وضعیت کاربران
user_state = {}

# پیام‌های ثابت
MESSAGES = {
    "main_menu": "1️⃣ جهت تمدید اشتراک فعلی عدد  1  را ارسال کنید.\n"
                 "2️⃣ جهت خرید اشتراک جدید عدد  2  را ارسال کنید.\n"
                 "3️⃣ جهت اطلاع از مانده اشتراک عدد  3  را ارسال کنید.\n"
                 "4️⃣ جهت تغییر نام کاربری عدد  4  را ارسال کنید.",
    "greeting": "سلام!\n☺️ من یک پاسخگوی آنلاین هستم.",
    "name_request": "لطفا نام خود را ارسال کنید:",
    "new_username_prompt": "لطفا نام کاربری جدید را ارسال کنید:",
    "welcome_user": '✨ سلام {username} عزیز، خوش اومدی🌹',
    "confirm_username": '✨ نام  شما "{text}" ثبت شد.\n\n'
                        '✅  اگر نام شما مورد تایید است عدد  1  را ارسال کنید.\n'
                        '🔄  برای تغییر نام کاربری عدد  2  را ارسال کنید.',
    "renew_subscription_prompt": "✍️ نام اشتراکی که می خواهید تمدید شود چیست؟",
    "renew_subscription_confirmation": '⭐️ اشتراک شما با نام کاربری "{username}" در اسرع وقت تمدید شده و به اطلاع شما خواهد شد.',
    "renew_subscription_details": ["💰 هزینه اشتراک را واریز کنید به کارت:\n\n"
                                   "5859831191786085\nشکوفه رضایی - بانک تجارت\n\n"
                                   "🔵 - ارسال اسکرین شات پرداخت الزامی است.\n"
                                   "🟢 - مهلت تست و پرداخت 48 ساعت است.\n"
                                   "🟡 - در صورت عدم پرداخت اشتراک شما لغو خواهد شد.",
                                   "9️⃣ برای بازگشت به مرحله قبلی عدد  9  را ارسال کنید.\n"
                                   "0️⃣ برای شروع مجدد عدد  0  را ارسال کنید."],
    "subscription_info_prompt": "✍️ لطفاً نام اشتراک مورد نظر را ارسال کنید.",
    "subscription_info_confirmation": '⭐️ درخواست شما برای اطلاع از مانده اشتراک "{username}" در اسرع وقت بررسی شده و به شما اطلاع داده خواهد شد.',
    "subscription_info_options": "9️⃣ برای بازگشت به مرحله قبلی عدد  9  را ارسال کنید.\n"
                                 "0️⃣ برای شروع مجدد عدد  0  را ارسال کنید.",
    "new_subscription_prompt": "✍️ لطفا یک نام کاربری برای اشتراک جدید وارد کنید:",
    "50G": "50 گیگ",
    "30G": "30 گیگ",
    "90T": "90 هزار تومان",
    "110T": "110 هزار تومان",
    "subscription_50_prompt": '⭐️ سفارش شما با مشخصات:\n\n'
                              'نام کاربری: "{username}"\n'
                              'حجم: "{volume}"\n'
                              'سی روزه\n\n'
                              'در اسرع وقت ساخته شده و برای شما ارسال خواهد شد.',
    "subscription_30_prompt": '⭐️ سفارش شما با مشخصات:\n\n'
                              'نام کاربری: "{username}"\n'
                              'حجم: "{volume}"\n'
                              'سی روزه\n\n'
                              'در اسرع وقت ساخته شده و برای شما ارسال خواهد شد.',

    "new_subscription": ["⭐️ جهت خرید اشتراک عدد مربوطه را ارسال کنید:\n\n"
                         "🔰 برای خرید 50 گیگ - 110 هزار تومان عدد   50   را ارسال کنید.\n"
                         "🔰 برای خرید 30 گیگ - 90 هزار تومان عدد   30   را ارسال کنید.\n",
                         "9️⃣ برای بازگشت به مرحله قبلی عدد  9  را ارسال کنید.\n"
                         "0️⃣ برای شروع مجدد عدد  0  را ارسال کنید."],

    "subscription_info": ["✍️ لطفاً نام اشتراک مورد نظر را ارسال کنید.",
                          "⭐️ درخواست شما در اسرع وقت بررسی شده و به شما اطلاع داده خواهد شد.",
                          "9️⃣ برای بازگشت به مرحله قبلی عدد  9  را ارسال کنید.\n"
                          "0️⃣ برای شروع مجدد عدد  0  را ارسال کنید."],

    "subscription_50_details": ["💰 مبلغ 110 هزار تومان را واریز کنید به کارت:\n\n"
                                "5859831191786085\nشکوفه رضایی - بانک تجارت\n\n"
                                "🔵 - ارسال اسکرین شات پرداخت الزامی است.\n"
                                "🟢 - مهلت تست و پرداخت 48 ساعت است.\n"
                                "🟡 - در صورت عدم پرداخت اشتراک شما لغو خواهد شد.",
                                "9️⃣ برای بازگشت به مرحله قبلی عدد  9  را ارسال کنید.\n"
                                "0️⃣ برای شروع مجدد عدد  0  را ارسال کنید."],

    "subscription_30_details": ["💰 مبلغ 90 هزار تومان را واریز کنید به کارت:\n\n"
                                "5859831191786085\nشکوفه رضایی - بانک تجارت\n\n"
                                "🔵 - ارسال اسکرین شات پرداخت الزامی است.\n"
                                "🟢 - مهلت تست و پرداخت 48 ساعت است.\n"
                                "🟡 - در صورت عدم پرداخت اشتراک شما لغو خواهد شد.",
                                "9️⃣ برای بازگشت به مرحله قبلی عدد  9  را ارسال کنید.\n"
                                "0️⃣ برای شروع مجدد عدد  0  را ارسال کنید."],
}

# لیست آی دی‌های مسدود شده
blocked_ids = [7777, 88888]
# تابع تبدیل اعداد فارسی به انگلیسی
def persian_to_english_number(text):
    persian_numbers = '۰۱۲۳۴۵۶۷۸۹'
    english_numbers = '0123456789'
    translation_table = str.maketrans(persian_numbers, english_numbers)
    return text.translate(translation_table)

async def send_messages(event, messages):
    """ارسال لیستی از پیام‌ها به کاربر"""
    if isinstance(messages, list):
        for msg in messages:
            await event.respond(msg)
    else:
        await event.respond(messages)

@client.on(events.NewMessage(incoming=True))
async def handler(event):
    if not event.is_private:  # شرط برای چت خصوصی
        return
    if event.sender_id in blocked_ids:  # شرط برای مسدود کردن آی دی‌های مشخص شده
        return
    if await event.get_sender() and (await event.get_sender()).bot:  # شرط برای ربات بودن
        return
    user_id = event.sender_id
    user_state.setdefault(user_id, "register")
    current_state = user_state[user_id]
    text = persian_to_english_number(event.raw_text.strip())

    logger.info(f"Received message from {user_id}: {text}")

    if any(keyword in text for keyword in ["سلام", "درود", "salam", "Salam", "hi", "Hi"]):
        user = session.query(UserState).filter_by(user_id=user_id).first()
        if user:
            await send_messages(event, MESSAGES["welcome_user"].format(username=user.state))
            await send_messages(event, MESSAGES["main_menu"])
            user_state[user_id] = "main_menu"
            return
        else:
            await send_messages(event, MESSAGES["greeting"])
            await send_messages(event, MESSAGES["name_request"])
            user_state[user_id] = "awaiting_name"
            return

    if current_state == "awaiting_name":
        user_state[user_id] = "confirm_name"
        user_state[f"{user_id}_name"] = text
        await send_messages(event, MESSAGES["confirm_username"].format(text=text))
        return

    if current_state == "confirm_name":
        if text == "1":
            username = user_state.pop(f"{user_id}_name")
            user = session.query(UserState).filter_by(user_id=user_id).first()
            if user:
                user.state = username
            else:
                user = UserState(user_id=user_id, state=username)
                session.add(user)
            session.commit()
            user_state[user_id] = "main_menu"
            await send_messages(event, MESSAGES["welcome_user"].format(username=username))
            await send_messages(event, MESSAGES["main_menu"])
        elif text == "2":
            user_state[user_id] = "awaiting_name"
            await send_messages(event, MESSAGES["new_username_prompt"])
        return

    if current_state == "main_menu":
        if text == "1":
            user_state[user_id] = "awaiting_renew_subscription"
            await send_messages(event, MESSAGES["renew_subscription_prompt"])
        elif text == "2":
            user_state[user_id] = "awaiting_new_subscription"
            await send_messages(event, MESSAGES["new_subscription"])
        elif text == "3":
            user_state[user_id] = "awaiting_subscription_info"
            await send_messages(event, MESSAGES["subscription_info_prompt"])
        elif text == "4":
            user_state[user_id] = "awaiting_name"
            await send_messages(event, MESSAGES["new_username_prompt"])
        return

    if current_state == "awaiting_renew_subscription":
        if text == "9":
            user_state[user_id] = "main_menu"
            await send_messages(event, MESSAGES["main_menu"])
        elif text == "0":
            user_state[user_id] = "main_menu"
            await send_messages(event, MESSAGES["main_menu"])
        else:
            await send_messages(event, MESSAGES["renew_subscription_confirmation"].format(username=text))
            await send_messages(event, MESSAGES["renew_subscription_details"])
            user_state[user_id] = "renew_subscription"
        return

    if current_state == "renew_subscription":
        if text == "9":
            user_state[user_id] = "awaiting_renew_subscription"
            await send_messages(event, MESSAGES["renew_subscription_prompt"])
        elif text == "0":
            user_state[user_id] = "main_menu"
            await send_messages(event, MESSAGES["main_menu"])
        return

    if current_state == "awaiting_new_subscription":
        if text == "50" or text == "30":
            user_state[user_id] = "awaiting_new_subscription_username"
            await send_messages(event, MESSAGES["new_subscription_prompt"])
            user_state[f"{user_id}_subscription_type"] = text
        elif text == "9":
            user_state[user_id] = "main_menu"
            await send_messages(event, MESSAGES["main_menu"])
        elif text == "0":
            user_state[user_id] = "main_menu"
            await send_messages(event, MESSAGES["main_menu"])
        return

    if current_state == "awaiting_new_subscription_username":
        subscription_type = user_state.pop(f"{user_id}_subscription_type")
        if subscription_type == "50":
            await send_messages(event, MESSAGES["subscription_50_prompt"].format(username=text, volume=MESSAGES["50G"]))
            await send_messages(event, MESSAGES["subscription_50_details"])
        elif subscription_type == "30":
            await send_messages(event, MESSAGES["subscription_30_prompt"].format(username=text, volume=MESSAGES["30G"]))
            await send_messages(event, MESSAGES["subscription_30_details"])
        user_state[user_id] = "new_subscription"
        return

    if current_state == "new_subscription":
        if text == "9":
            user_state[user_id] = "awaiting_new_subscription"
            await send_messages(event, MESSAGES["new_subscription"])
        elif text == "0":
            user_state[user_id] = "main_menu"
            await send_messages(event, MESSAGES["main_menu"])
        return

    if current_state == "awaiting_subscription_info":
        if text == "9":
            user_state[user_id] = "main_menu"
            await send_messages(event, MESSAGES["main_menu"])
        elif text == "0":
            user_state[user_id] = "main_menu"
            await send_messages(event, MESSAGES["main_menu"])
        else:
            await send_messages(event, MESSAGES["subscription_info_confirmation"].format(username=text))
            await send_messages(event, MESSAGES["subscription_info_options"])
            user_state[user_id] = "subscription_info"
        return

    if current_state == "subscription_info":
        if text == "9":
            user_state[user_id] = "awaiting_subscription_info"
            await send_messages(event, MESSAGES["subscription_info_prompt"])
        elif text == "0":
            user_state[user_id] = "main_menu"
            await send_messages(event, MESSAGES["main_menu"])
        return

    logger.info(f"Sent messages to {user_id}")

client.start()
if client.is_connected():
    logger.info("Connected to Telegram.")
else:
    logger.error("Failed to connect to Telegram.")

client.run_until_disconnected()
